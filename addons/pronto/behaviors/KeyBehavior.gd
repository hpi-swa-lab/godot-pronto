@tool
#thumb("KeyboardPhysical")
extends Behavior
class_name KeyBehavior

## The KeyBehavior is a [class Behavior] that helps reacting to keyboard events.
##
## Each KeyBehavior can react to exactly one key and
## emits signals corresponding to the user interactions
## with that key.

## The key that the KeyBehavior reacts to.
## Its value has to be one of the keycodes generated by [method Event.as_text_keycode] 
@export var key: String

## Shows whether the key is currently pressed
var is_pressed: bool = false

## Shows the time in milliseconds that the key has been pressed
## Is [code]0[/code] as long as the key is not pressed.
var pressed_since: int = 0

## Emitted in the [method Node._input] callback when the [member KeyBehavior.key] is pressed down
signal down

## Emitted in the [method Node._input] callback when the [member KeyBehavior.key] is raised up
signal up

## Emitted with [signal KeyBehavior.down] and [signal KeyBehavior.up]
## [param down] tells in which direction the toggle happened
signal toggled(down: bool)

## Emitted every frame as long as the [member KeyBehavior.key] is pressed
signal pressed

## Emitted in the [method Node._input] callback the first moment, the down-event 
## is catched. 
signal just_down

## Emitted in the [method Node._input] callback the first moment, the up-event is
## catched. [param duration] is the time in milliseconds that the key was down
signal just_up(duration: int)

func _process(_delta):
	super._process(_delta)
	if is_pressed:
		pressed.emit()

## Override of [method Behavior.lines] 
## Used to add the [member KeyBehavior.key] below the icon
func lines():
	return super.lines() + [Lines.BottomText.new(self, str(key))]

func _input(event):
	if event is InputEventKey and event.as_text_keycode() == key and not event.echo and can_process():
		if event.pressed and !is_pressed:
			pressed_since = Time.get_ticks_msec()
			just_down.emit()
		if !event.pressed and is_pressed:
			just_up.emit(Time.get_ticks_msec() - pressed_since)
			pressed_since = 0
		
		is_pressed = event.pressed
		
		if is_pressed:
			down.emit()
			toggled.emit(true)
		else:
			up.emit()
			toggled.emit(false)
