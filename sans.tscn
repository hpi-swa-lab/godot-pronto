[gd_scene load_steps=13 format=3 uid="uid://d4lwgj5sqwhly"]

[ext_resource type="Script" path="res://addons/pronto/behaviors/SpawnerBehavior.gd" id="1_k0cyg"]
[ext_resource type="Script" path="res://addons/pronto/behaviors/PlaceholderBehavior.gd" id="2_dkxhb"]
[ext_resource type="Script" path="res://addons/pronto/behaviors/CodeBehavior.gd" id="2_s43h7"]
[ext_resource type="Texture2D" uid="uid://bhos8bn4u0qp8" path="res://addons/pronto/icons/MissingTexture.svg" id="3_1d7w5"]
[ext_resource type="Script" path="res://addons/pronto/helpers/ConnectionScript.gd" id="3_vyugp"]
[ext_resource type="Script" path="res://addons/pronto/behaviors/KeyBehavior.gd" id="4_4j2y3"]
[ext_resource type="Script" path="res://addons/pronto/helpers/Connection.gd" id="7_meshp"]

[sub_resource type="GDScript" id="GDScript_w7wfe"]
script/source = "@tool
extends U
@warning_ignore(\"unused_parameter\")

var root = closest('sans') # HACK: get root is not in base self, but accessing the scene root works like this

var rng = RandomNumberGenerator.new()
var spawner = closest('EnemySpawner')
enum SpawnType {
	FLY = 0,
	ARROW = 1,
	WALL_RIGHT = 2,
	WALL_LEFT = 3,
	WALL_UP = 4,
	WALL_DOWN = 5
}
enum ScreenSide {
	RIGHT = 0,
	LEFT = 1,
	UP = 2,
	DOWN = 3
}

# a pattern is a series of spawn events.
# a spawn event is defined as a dict of time, type, position and optionally a \"toward\"
# (index as in spawner's child index for the spawn_at call)
const PATTERNS = [
	[ # Fly pattern
		{
			time = 0,
			type = SpawnType.FLY,
			pos = Vector2(0,0)
		},
		{
			time = 0,
			type = SpawnType.FLY,
			pos = Vector2(0,0)
		}
	]
]

func get_opposite_on_screen(v: Vector2):
	return Vector2(root.get_viewport().size.y - v.y, root.get_viewport().size.x - v.x)

func generate_random_corner_coord(side: int = ScreenSide.keys().pick_random()):
	if side == ScreenSide.RIGHT:
		return Vector2(root.get_viewport().size.x, rng.randi_range(0,root.get_viewport().size.y))
	elif side == ScreenSide.LEFT:
		return Vector2(0, rng.randi_range(0,root.get_viewport().size.y))
	elif side == ScreenSide.UP:
		return Vector2(rng.randi_range(0,root.get_viewport().size.x), 0)
	# ScreenSide.DOWN
	return Vector2(rng.randi_range(0,root.get_viewport().size.x), root.get_viewport().size.y)

func run():	
	var start_time = Time.get_ticks_msec()
	var spawn_events = []
	
	# 50% chance to have a pattern-based attack
	if rng.randf() > 0.5:
		# choose a random pattern
		spawn_events = PATTERNS.pick_random()
	else:
		# generate spawn events
		var amount_of_spawn_events = rng.randi_range(5, 10)
		for i in range(amount_of_spawn_events):
			var new_spawn_event = {
				time = rng.randi_range(0,2000),
				type = SpawnType.keys().pick_random()
			}
			if new_spawn_event.type == SpawnType.FLY:
				new_spawn_event.pos = generate_random_corner_coord()
				new_spawn_event.toward = get_opposite_on_screen(new_spawn_event.pos)
			elif new_spawn_event.type == SpawnType.ARROW:
				new_spawn_event.pos = generate_random_corner_coord([ScreenSide.LEFT, ScreenSide.RIGHT].pick_random())
			else:
				# WALL
				if new_spawn_event.type in [SpawnType.WALL_UP, SpawnType.WALL_DOWN]:
					new_spawn_event.pos = generate_random_corner_coord([ScreenSide.UP, ScreenSide.DOWN].pick_random())
				else:
					new_spawn_event.pos = generate_random_corner_coord([ScreenSide.LEFT, ScreenSide.RIGHT].pick_random())
	
	for spawn_event in spawn_events:
		(func ():
			await root.get_tree().create_timer(float(start_time + spawn_event.time - Time.get_ticks_msec()) / 1000).timeout
			if spawn_event.has('toward'):
				spawner.callv(\"spawn_at_toward\",[spawn_event.pos, spawn_event.type, spawn_event.toward])
			else:
				spawner.callv(\"spawn_at\",[spawn_event.pos, spawn_event.type])
		).call()
	
	return null
"

[sub_resource type="Resource" id="Resource_urcuh"]
script = ExtResource("3_vyugp")
nested_script = SubResource("GDScript_w7wfe")
argument_names = []
return_value = true

[sub_resource type="GDScript" id="GDScript_v5m7g"]
script/source = "@tool
extends U
@warning_ignore(\"unused_parameter\")
func run(from: Node2D, to: Node2D):
	return true
"

[sub_resource type="Resource" id="Resource_3akwk"]
script = ExtResource("3_vyugp")
nested_script = SubResource("GDScript_v5m7g")
argument_names = ["from", "to"]
return_value = true

[sub_resource type="Resource" id="Resource_ukgyi"]
script = ExtResource("7_meshp")
signal_name = "just_down"
to = NodePath("../CodeBehavior")
more_references = []
invoke = "execute"
arguments = []
only_if = SubResource("Resource_3akwk")
deferred = false
enabled = true

[node name="sans" type="Node2D"]

[node name="EnemySpawner" type="Node2D" parent="."]
position = Vector2(373, 167)
script = ExtResource("1_k0cyg")

[node name="GoLeft" type="Node2D" parent="EnemySpawner"]
position = Vector2(61, -47)
script = ExtResource("2_dkxhb")
sprite_texture = ExtResource("3_1d7w5")

[node name="CodeBehavior" type="Node2D" parent="."]
position = Vector2(159, 126)
script = ExtResource("2_s43h7")
evaluate = SubResource("Resource_urcuh")

[node name="KeyBehavior" type="Node2D" parent="."]
position = Vector2(83, 82)
script = ExtResource("4_4j2y3")
key = "A"
metadata/pronto_connections = [SubResource("Resource_ukgyi")]

[node name="PlaceholderBehavior" type="Node2D" parent="."]
script = ExtResource("2_dkxhb")
sprite_texture = ExtResource("3_1d7w5")
outline_width = 100.0
